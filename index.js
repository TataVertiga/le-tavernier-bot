const { Client, GatewayIntentBits, Events } = require("discord.js");
require("dotenv").config();
require("./server"); // Serveur Express pour rester en ligne sur Replit
const { PREFIX } = require("./config");
const fs = require("fs");
const path = require("path");

// Chargement dynamique des commandes
const commands = new Map();
const commandFiles = fs.readdirSync(path.join(__dirname, "./commands")).filter(file => file.endsWith(".js"));
for (const file of commandFiles) {
  const command = require(`./commands/${file}`);
  if (command.name && typeof command.execute === "function") {
    commands.set(command.name, command);
    console.log(`Commande chargÃ©e : ${command.name}`);
  }
}

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

const { checkKickLive } = require("./services/kick");
const { checkTikTok } = require("./services/tiktok");
// Chargement dynamique des Ã©vÃ©nements
const eventsPath = path.join(__dirname, "events");
const eventFiles = fs.readdirSync(eventsPath).filter(file => file.endsWith(".js"));

for (const file of eventFiles) {
  const event = require(`./events/${file}`);
  if (event.name && typeof event.execute === "function") {
    client.on(event.name, (...args) => event.execute(...args));
    console.log(`ðŸŽ‰ Ã‰vÃ©nement chargÃ© : ${event.name}`);
  }
}


client.once("ready", () => {
  console.log(`âœ… Le Tavernier est connectÃ© en tant que ${client.user.tag}`);
  setInterval(() => checkKickLive(client), 30000);
  setInterval(() => checkTikTok(client), 180000);
});

client.on(Events.GuildMemberAdd, member => onGuildMemberAdd(client, member));

client.on("messageCreate", async message => {
  if (message.author.bot) return;

  if (message.content.startsWith(PREFIX)) {
    const args = message.content.slice(PREFIX.length).trim().split(/ +/);
    const commandName = args.shift().toLowerCase();

    const command = commands.get(commandName);
    if (command) {
      try {
        await command.execute(message, args);
      } catch (err) {
        console.error(`Erreur avec la commande ${commandName}:`, err);
        message.reply("ðŸ¤• Le Tavernier sâ€™est pris les pieds dans le tapis...");
      }
    }
    return;
  }

  // RÃ©actions au ping
  if (message.mentions.has(client.user)) {
    const now = Date.now();
    if (!client.lastPingTimes) client.lastPingTimes = {};
    const lastPing = client.lastPingTimes[message.author.id] || 0;
    const delay = now - lastPing;

    const baseReplies = [
      "De quoi ?",
      "Keskidi ?",
      "Hein ?",
      "Tu veux ma biÃ¨re ou quoi ?",
      "Parle plus fort, jâ€™ai le houblon bouchÃ©.",
      "Quâ€™est-ce que câ€™est encore que ces simagrÃ©es ?",
      "Vous criez, vous criez, mais vous dites rien !",
      "Une chope, deux baffes, choisis bien ta prochaine phrase.",
      "Mais vous Ãªtes pas mort espÃ¨ce de connard ?",
      "Ah non mais moi jâ€™suis lÃ  pour servir, pas pour discuter.",
      "Non jâ€™peux pas, jâ€™ai pas lâ€™temps, jâ€™ai rien Ã  faire.",
      "Vous avez frappÃ© Ã  la mauvaise taverne.",
      "Jâ€™Ã©coute dâ€™une oreille distraite et lâ€™autre bourrÃ©e.",
      "Qui ose troubler ma sieste digestive ?"
    ];

    const sassyReplies = [
      "Non jâ€™peux pas, jâ€™ai pas lâ€™temps, jâ€™ai rien Ã  faire.",
      "Parle-moi encore comme Ã§a et jâ€™te sers un rÃ¢teau mÃ©diÃ©val.",
      "Ton message sent la Douzinite aiguÃ«.",
      "Tu veux une choppe ou une claque ?",
      "Mais vous Ãªtes pas mort espÃ¨ce de connard ?",
      "J'vous ai rÃ©pondu dÃ©jÃ  ! Z'avez bu ou quoi ?",
      "Vous me fatiguez, câ€™est pas croyable...",
      "Câ€™est pas moi qui ai commencÃ© !",
      "Tu veux du pain ? Yâ€™a plus de pain.",
      "Ã‡a commence Ã  faire beaucoup dâ€™interruptions pour un seul homme.",
      "Si câ€™est pas urgent, jâ€™reviens dans 3 pintes.",
      "Tâ€™as une tÃªte Ã  finir au pilori toi...",
      "Je note ton nom et jâ€™oublie aussitÃ´t."
    ];

    const replyList = delay > 30000 ? baseReplies : sassyReplies;
    const random = replyList[Math.floor(Math.random() * replyList.length)];
    await message.reply(random);
    client.lastPingTimes[message.author.id] = now;
  }
});

client.login(process.env.TOKEN);
