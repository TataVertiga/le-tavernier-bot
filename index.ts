// --- Imports ---
import express from 'express';
import { Client, GatewayIntentBits, Partials, Events, Message } from 'discord.js';
import dotenv from 'dotenv';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

import { PREFIX } from './config.js';
import { initKick } from './services/kick.js';
import { checkYoutube } from './services/youtube.js';
import { initAnniversaires } from "./services/anniversaires.js";
import { resumeGiveaways } from "./services/giveawayManager.js";
import registerGiveawayInteraction from "./events/interactionCreate.js";

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// --- Serveur Express pour Render ---
const app = express();
app.get('/', (_, res) => res.send('üç∫ Le Tavernier est en ligne !'));
app.listen(process.env.PORT || 10000, () =>
  console.log(`üöÄ Serveur Express actif`)
);

// --- Client Discord ---
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,                 // base
    GatewayIntentBits.GuildMembers,           // n√©cessaire pour GuildMemberUpdate + r√¥les
    GatewayIntentBits.GuildMessages,          // lire/√©crire dans les salons
    GatewayIntentBits.MessageContent,         // si tu lis le contenu des messages
    GatewayIntentBits.GuildMessageReactions   // n√©cessaire pour MessageReactionAdd
  ],
  partials: [
    Partials.Message,   // fetch messages non mis en cache
    Partials.Channel,   // requis avec Partials.Message
    Partials.Reaction   // fetch des r√©actions non en cache
  ]
}) as Client & { lastPingTimes?: Record<string, number> };

// --- Enregistrement des interactions de giveaway ---
registerGiveawayInteraction(client);

// --- Chargement dynamique des commandes ---
async function loadCommands() {
  const commands = new Map<string, any>();
  const commandsPath = path.join(__dirname, 'commands');
  if (!fs.existsSync(commandsPath)) return commands;

  const commandFiles = fs.readdirSync(commandsPath).filter(f => f.endsWith('.js'));

  await Promise.all(commandFiles.map(async file => {
    const command = await import(`./commands/${file}`);
    if (command.default?.name && typeof command.default.execute === 'function') {
      commands.set(command.default.name, command.default);
      console.log(`üì¶ Commande charg√©e : ${command.default.name}`);
    }
  }));

  return commands;
}

// --- Chargement dynamique des √©v√©nements ---
async function loadEvents(client: Client) {
  const eventsPath = path.join(__dirname, 'events');
  if (!fs.existsSync(eventsPath)) return;

  const eventFiles = fs.readdirSync(eventsPath).filter(f => f.endsWith('.js'));

  await Promise.all(eventFiles.map(async file => {
    const event = await import(`./events/${file}`);
    if (event.default?.name && typeof event.default.execute === 'function') {
      client.on(event.default.name, (...args: any[]) => event.default.execute(...args));
      console.log(`üéâ √âv√©nement charg√© : ${event.default.name}`);
    }
  }));
}

// --- Initialisation ---
client.once('ready', async () => {
  console.log(`‚úÖ Le Tavernier est connect√© en tant que ${client.user?.tag}`);

  // ‚úÖ Reprise automatique des giveaways apr√®s red√©marrage
  resumeGiveaways(client);

  // ‚è≥ Lancer les autres services
  setTimeout(() => {
    initKick(client);
    initAnniversaires(client);
    checkYoutube(client);
    setInterval(() => checkYoutube(client), 10 * 60 * 1000);
  }, 3000);
});

// --- Gestion des messages & commandes ---
let commands: Map<string, any>;
client.on(Events.MessageCreate, async (message: Message) => {
  if (message.author.bot) return;

  // --- Commandes ---
  if (message.content.startsWith(PREFIX)) {
    if (!commands) return; // s√©curit√© au boot
    const args = message.content.slice(PREFIX.length).trim().split(/ +/);
    const commandName = args.shift()?.toLowerCase();
    if (!commandName) return;

    const command = commands.get(commandName);
    if (command) {
      try {
        await command.execute(message, args);
      } catch (err) {
        console.error(`Erreur avec la commande ${commandName}:`, err);
        message.reply("ü§ï Le Tavernier s‚Äôest pris les pieds dans le tapis...");
      }
    }
  }

  // --- R√©ponse au ping ---
  if (client.user && message.mentions.has(client.user)) {
    const now = Date.now();
    if (!client.lastPingTimes) client.lastPingTimes = {};
    const lastPing = client.lastPingTimes[message.author.id] || 0;
    const delay = now - lastPing;

    const baseReplies = [
      "De quoi ?", "Keskidi ?", "Hein ?", "Tu veux ma bi√®re ou quoi ?",
      "Parle plus fort, j‚Äôai le houblon bouch√©.", "Qu‚Äôest-ce que c‚Äôest encore que ces simagr√©es ?",
      "Vous criez, vous criez, mais vous dites rien !", "Une chope, deux baffes, choisis bien ta prochaine phrase.",
      "Mais vous √™tes pas mort esp√®ce de connard ?", "Ah non mais moi j‚Äôsuis l√† pour servir, pas pour discuter.",
      "Non j‚Äôpeux pas, j‚Äôai pas l‚Äôtemps, j‚Äôai rien √† faire.", "Vous avez frapp√© √† la mauvaise taverne.",
      "J‚Äô√©coute d‚Äôune oreille distraite et l‚Äôautre bourr√©e.", "Qui ose troubler ma sieste digestive ?"
    ];

    const sassyReplies = [
      "Non j‚Äôpeux pas, j‚Äôai pas l‚Äôtemps, j‚Äôai rien √† faire.",
      "Parle-moi encore comme √ßa et j‚Äôte sers un r√¢teau m√©di√©val.",
      "Ton message sent la Douzinite aigu√´.",
      "Tu veux une choppe ou une claque ?",
      "Mais vous √™tes pas mort esp√®ce de connard ?",
      "J'vous ai r√©pondu d√©j√† ! Z'avez bu ou quoi ?",
      "Vous me fatiguez, c‚Äôest pas croyable...",
      "C‚Äôest pas moi qui ai commenc√© !",
      "Tu veux du pain ? Y‚Äôa plus de pain.",
      "√áa commence √† faire beaucoup d‚Äôinterruptions pour un seul homme.",
      "Si c‚Äôest pas urgent, j‚Äôreviens dans 3 pintes.",
      "T‚Äôas une t√™te √† finir au pilori toi...",
      "Je note ton nom et j‚Äôoublie aussit√¥t."
    ];

    const replyList = delay > 30_000 ? baseReplies : sassyReplies;
    const random = replyList[Math.floor(Math.random() * replyList.length)];
    await message.reply(random);
    client.lastPingTimes[message.author.id] = now;
  }
});

// --- Lancement ---
(async () => {
  const token = process.env.DISCORD_TOKEN || process.env.TOKEN; // ‚Üê Option B
  if (!token) {
    console.error("‚ùå TOKEN manquant (mets DISCORD_TOKEN=... dans .env)");
    process.exit(1);
  }
  commands = await loadCommands();
  await loadEvents(client);
  await client.login(token);
})();
export default client;
